namespace PCG_DFFortressGenerator.Evolution
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    using PCG_DFFortressGenerator.Classes;
    using PCG_DFFortressGenerator.Classes.Rooms;

    /// <summary>
    /// The evolver used in evolving maps.
    /// </summary>
    public class Evolver
    {
        #region Mutation Constants
        /// <summary>
        /// The chance that a room will mutate into a different room.
        /// </summary>
        public const double MutationChance = 0.30;

        /// <summary>
        /// The number of children to generate per parent in a new generation.
        /// </summary>
        public const int ChildrenToSpawn = 10;

        /// <summary>
        /// Number of generations to run.
        /// </summary>
        public const int NumberOfGenerations = 20;

        /// <summary>
        /// The number of different layouts are used in evolution.
        /// </summary>
        public const int NumberOfLayoutsToGenerate = 5;

        /// <summary>
        /// The penalty to apply to a fitness of a layout if it does not contain the required rooms.
        /// </summary>
        public const double MissingRoomPenalty = 10;

        /// <summary>
        /// The amount to increase the penalty per generation.
        /// </summary>
        public const double MissingRoomPenaltyScalingFactor = 2;

        #endregion

        /// <summary>
        /// Initializes a new instance of the <see cref="Evolver"/> class.
        /// </summary>
        /// <param name="x"> The height of the map. </param>
        /// <param name="y"> The width of the map. </param>
        /// <param name="z"> The depth of the map. </param>
        /// <param name="chosenAreas"> The required rooms for this evolution.  </param>
        /// <param name="numberOfDwarves"> The number Of dwarves to plan for. </param>
        public Evolver(int x, int y, int z, List<Area> chosenAreas, int numberOfDwarves)
        {
            this.GeneratedMaps = new List<Map>();
            AreaWeights = GenerateAreaWeights();

            var numberOfRoomsRequired = this.CalculateNumberOfRooms(chosenAreas, numberOfDwarves);
            var lg = new LayoutGenerator(x, y, z, numberOfRoomsRequired);

            for (var i = 0; i < NumberOfLayoutsToGenerate; i++)
            {
                this.GeneratedMaps[i] = lg.GenerateNewLayout();
                this.GeneratedMaps[i].CalculateDistancesBetweenRooms();
            }

            this.RequiredAreas = new Dictionary<string, int>(); // TODO: Extract area names from chosenAreas (Grooss)

            // TODO: Do evolution loop
        }

        /// <summary>
        /// Gets the weights between areas.
        /// </summary>
        public static Dictionary<Tuple<string, string>, double> AreaWeights { get; private set; }

        /// <summary>
        /// Gets the maps generated by the evolver.
        /// </summary>
        public List<Map> GeneratedMaps { get; private set; }

        /// <summary>
        /// Gets or sets the required rooms for the layout.
        /// </summary>
        public Dictionary<string, int> RequiredAreas { get; set; }

        /// <summary>
        /// The generate area weights.
        /// </summary>
        /// <returns> The <see cref="Dictionary"/> containing the weights between areas. </returns>
        private static Dictionary<Tuple<string, string>, double> GenerateAreaWeights()
        {
            var dictionary = new Dictionary<Tuple<string, string>, double>();

            // Rooms
            // Barracks
            var t = new Tuple<string, string>("test1", "test2");
            var testVal = 0.0;
            //dictionary.Add(t, testVal);

            t = new Tuple<string, string>("test1", "test2");
            testVal = 0.0;
            //dictionary.Add(t, testVal);

            // Workshops

            // Stockpiles

            // TODO: Write area weights in code (Grooss)
            return dictionary;
        }

        /// <summary>
        /// Calculates the number of rooms required.
        /// </summary>
        /// <param name="requiredAreas"> The areas that must be in the layout. </param>
        /// <param name="numberOfDwarves"> The number of dwarves to take into account when generating. </param>
        /// <returns> The number of rooms required. </returns>
        private int CalculateNumberOfRooms(List<Area> requiredAreas, int numberOfDwarves)
        {
            var rooms = 0;

            if (requiredAreas.OfType<Bedroom>().Any())
            {
                rooms += (int)Math.Ceiling(numberOfDwarves / 8d);
            }
            if (requiredAreas.OfType<DiningRoom>().Any())
            {
                rooms += (int)Math.Ceiling(numberOfDwarves / 6d);
            }

            rooms += numberOfDwarves / 2;
            return rooms;
        }
    }
}
