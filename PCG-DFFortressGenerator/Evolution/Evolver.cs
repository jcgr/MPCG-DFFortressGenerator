namespace PCG_DFFortressGenerator.Evolution
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    using PCG_DFFortressGenerator.Classes;
    using PCG_DFFortressGenerator.Classes.Rooms;

    /// <summary>
    /// The evolver used in evolving maps.
    /// </summary>
    public class Evolver
    {
        #region Mutation Constants
        /// <summary>
        /// The chance that a room will mutate into a different room.
        /// </summary>
        public const double MutationChance = 0.30;

        /// <summary>
        /// The number of children to generate per parent in a new generation.
        /// </summary>
        public const int ChildrenToSpawn = 10;

        /// <summary>
        /// Number of generations to run.
        /// </summary>
        public const int NumberOfGenerations = 20;

        /// <summary>
        /// The number of different layouts are used in evolution.
        /// </summary>
        public const int NumberOfLayoutsToGenerate = 5;

        /// <summary>
        /// The penalty to apply to a fitness of a layout if it does not contain the required rooms.
        /// </summary>
        public const double MissingRoomPenalty = 10;

        /// <summary>
        /// The amount to increase the penalty per generation.
        /// </summary>
        public const double MissingRoomPenaltyScalingFactor = 2;

        #endregion

        /// <summary>
        /// Initializes a new instance of the <see cref="Evolver"/> class.
        /// </summary>
        /// <param name="x"> The height of the map. </param>
        /// <param name="y"> The width of the map. </param>
        /// <param name="z"> The depth of the map. </param>
        /// <param name="chosenAreas"> The required rooms for this evolution.  </param>
        /// <param name="numberOfDwarves"> The number Of dwarves to plan for. </param>
        public Evolver(int x, int y, int z, List<Area> chosenAreas, int numberOfDwarves)
        {
            this.GeneratedMaps = new List<Map>();
            AreaWeights = GenerateAreaWeights();

            var numberOfRoomsRequired = CalculateNumberOfRooms(chosenAreas, numberOfDwarves);
            var lg = new LayoutGenerator(x, y, z, numberOfRoomsRequired);

            for (var i = 0; i < NumberOfLayoutsToGenerate; i++)
            {
                this.GeneratedMaps[i] = lg.GenerateNewLayout();
                this.GeneratedMaps[i].CalculateDistancesBetweenAreas();
            }

            this.RequiredAreas = GetRequiredAreas(chosenAreas, numberOfDwarves); 
           
            // TODO: Do evolution loop
        }

        /// <summary>
        /// Gets the weights between areas.
        /// </summary>
        public static Dictionary<string, Dictionary<string, double>> AreaWeights { get; private set; }

        /// <summary>
        /// Gets the maps generated by the evolver.
        /// </summary>
        public List<Map> GeneratedMaps { get; private set; }

        /// <summary>
        /// Gets or sets the required rooms for the layout.
        /// </summary>
        public Dictionary<string, int> RequiredAreas { get; set; }

        /// <summary>
        /// The generate area weights.
        /// </summary>
        /// <returns> The Dictionary containing the weights between areas. </returns>
        private static Dictionary<string, Dictionary<string, double>> GenerateAreaWeights()
        {
            var finalDict = new Dictionary<string, Dictionary<string, double>>();
            const double Close = 1d;
            const double Far = -1d;

            // ----------
            // Rooms
            // ----------
            // Barracks
            var barrackDict = new Dictionary<string, double>
                                  {
                                      { "r", Close },
                                      { "b", Far },
                                      { "d", Far },
                                      { "@", Close }
                                  };
            finalDict.Add("r", barrackDict);

            // Bedroom
            var bedroomDict = new Dictionary<string, double> { { "b", Close }, { "r", Far }, { "@", Close } };
            finalDict.Add("b", bedroomDict);

            // Dining Room
            var diningroomDict = new Dictionary<string, double> { { "d", Close }, { "r", Far }, { "@", Far } };
            finalDict.Add("d", diningroomDict);

            // Entrance
            var entranceDict = new Dictionary<string, double>
                                   {
                                       { "@", Close },
                                       { "r", Close },
                                       { "b", Far },
                                       { "d", Far }
                                   };
            finalDict.Add("@", entranceDict);

            // Farm
            var farmDict = new Dictionary<string, double> { { "f", Close } };
            finalDict.Add("f", farmDict);

            // Office
            var officeDict = new Dictionary<string, double> { { "o", Close } };
            finalDict.Add("o", officeDict);

            // ----------
            // Workshops
            // ----------
            // Brewery
            var breweryDict = new Dictionary<string, double> { { "q", Close }, { "D", Close } };
            finalDict.Add("q", breweryDict);

            // Carpenter
            var carpenterDict = new Dictionary<string, double> { { "c", Close }, { "U", Close }, { "T", Close } };
            finalDict.Add("c", carpenterDict);

            // Craftdwarf
            var craftdwarfDict = new Dictionary<string, double>
                                     {
                                         { "¤", Close },
                                         { "G", Close },
                                         { "S", Close },
                                         { "T", Close }
                                     };
            finalDict.Add("¤", craftdwarfDict);

            // Fishery
            var fisheryDict = new Dictionary<string, double> { { "e", Close }, { "D", Close } };
            finalDict.Add("e", fisheryDict);

            // Kitchen
            // TODO: Grooss ? Hvad er kitchen value? Burde nok addes til finalDict
            var kitchenDict = new Dictionary<string, double> { { "k", Close }, { "D", Close } };

            // Mason
            var masonDict = new Dictionary<string, double> { { "m", Close }, { "U", Close }, { "S", Close } };
            finalDict.Add("m", masonDict);

            // Metalsmith
            var metalsmithDict = new Dictionary<string, double> { { "h", Close }, { "B", Close }, { "W", Close } };
            finalDict.Add("h", metalsmithDict);

            // Smelter
            var smelterDict = new Dictionary<string, double> { { "s", Close }, { "u", Close }, { "B", Close } };
            finalDict.Add("s", smelterDict);

            // Wood Furnace
            var woodfurnaceDict = new Dictionary<string, double>
                                      {
                                          { "u", Close },
                                          { "s", Close },
                                          { "B", Close },
                                          { "T", Close }
                                      };
            finalDict.Add("u", woodfurnaceDict);

            // ----------
            // Stockpiles
            // ----------
            // BarBlock
            var barblockDict = new Dictionary<string, double>
                                   {
                                       { "B", Close },
                                       { "s", Close },
                                       { "h", Close },
                                       { "u", Close }
                                   };
            finalDict.Add("B", barblockDict);

            // Cloth
            var clothDict = new Dictionary<string, double> { { "C", Close } };
            finalDict.Add("C", clothDict);

            // Finished Goods
            var finishedgoodsDict = new Dictionary<string, double> { { "G", Close }, { "¤", Close } };
            finalDict.Add("G", finishedgoodsDict);

            // Food
            var foodDict = new Dictionary<string, double>
                               {
                                   { "D", Close },
                                   { "d", Close },
                                   { "e", Close },
                                   { "k", Close },
                                   { "q", Close }
                               };
            finalDict.Add("D", foodDict);

            // Furniture
            var furnitureDict = new Dictionary<string, double> { { "U", Close }, { "c", Close }, { "m", Close } };
            finalDict.Add("U", furnitureDict);

            // Leather
            var leatherDict = new Dictionary<string, double> { { "L", Close } };
            finalDict.Add("L", leatherDict);

            // Stone
            var stoneDict = new Dictionary<string, double> { { "S", Close }, { "¤", Close }, { "m", Close } };
            finalDict.Add("S", stoneDict);

            // Weaponry
            var weaponryDict = new Dictionary<string, double> { { "W", Close }, { "h", Close } };
            finalDict.Add("W", weaponryDict);

            // Wood
            var woodDict = new Dictionary<string, double>
                               {
                                   { "T", Close },
                                   { "c", Close },
                                   { "¤", Close },
                                   { "u", Close }
                               };
            finalDict.Add("T", woodDict);

            return finalDict;
        }

        /// <summary>
        /// Converts chosen areas and number of dwarves into a dictionary.
        /// </summary>
        /// <param name="chosenAreas">The areas chosen by the user.</param>
        /// <param name="numberOfDwarves">The number of dwarves to accomodate.</param>
        /// <returns>The dictionary.</returns>
        private static Dictionary<string, int> GetRequiredAreas(List<Area> chosenAreas, int numberOfDwarves)
        {
            var ra = new Dictionary<string, int>();

            foreach (var tempName in chosenAreas.Select(t => t.AreaName))
            {
                if (tempName.Equals("b"))
                {
                    ra.Add(tempName, (int)Math.Ceiling(numberOfDwarves / 8d));
                }
                else if (tempName.Equals("d"))
                {
                    ra.Add(tempName, (int)Math.Ceiling(numberOfDwarves / 6d));
                }
                else
                {
                    ra.Add(tempName, 1);
                }
            }

            return ra;
        }

        /// <summary>
        /// Calculates the number of rooms required.
        /// </summary>
        /// <param name="requiredAreas"> The areas that must be in the layout. </param>
        /// <param name="numberOfDwarves"> The number of dwarves to take into account when generating. </param>
        /// <returns> The number of rooms required. </returns>
        private static int CalculateNumberOfRooms(List<Area> requiredAreas, int numberOfDwarves)
        {
            var rooms = 0;

            if (requiredAreas.OfType<Bedroom>().Any())
            {
                rooms += (int)Math.Ceiling(numberOfDwarves / 8d);
            }

            if (requiredAreas.OfType<DiningRoom>().Any())
            {
                rooms += (int)Math.Ceiling(numberOfDwarves / 6d);
            }

            rooms += numberOfDwarves / 2;
            return rooms;
        }
    }
}
